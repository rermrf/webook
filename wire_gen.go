// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	events2 "webook/article/events"
	repository2 "webook/article/repository"
	cache2 "webook/article/repository/cache"
	dao2 "webook/article/repository/dao"
	service2 "webook/article/service"
	"webook/interactive/events"
	"webook/interactive/repository"
	"webook/interactive/repository/cache"
	"webook/interactive/repository/dao"
	"webook/interactive/service"
	"webook/internal/handler"
	"webook/internal/handler/jwt"
	"webook/internal/ioc"
	repository3 "webook/ranking/repository"
	cache4 "webook/ranking/repository/cache"
	service3 "webook/ranking/service"
)

import (
	_ "github.com/spf13/viper/remote"
)

// Injectors from wire.go:

func InitWebServer() *App {
	cmdable := ioc.InitRedis()
	jwtHandler := jwt.NewRedisJWTHandler(cmdable)
	loggerV1 := ioc.InitLogger()
	v := ioc.InitMiddlewares(cmdable, jwtHandler, loggerV1)
	userServiceClient := ioc.InitUserGRPCClient()
	codeServiceClient := ioc.InitCodeGRPCClient()
	userHandler := handler.NewUserHandler(userServiceClient, codeServiceClient, cmdable, jwtHandler, loggerV1)
	wechatService := ioc.InitOAuth2WechatService(loggerV1)
	oAuth2WechatHandler := handler.NewOAuth2WechatHandler(wechatService, userServiceClient, jwtHandler)
	articleServiceClient := ioc.InitArticleGRPCClient()
	db := ioc.InitDB(loggerV1)
	interactiveDao := dao.NewGORMInteractiveDao(db)
	interactiveCache := cache.NewRedisInteractiveCache(cmdable)
	interactiveRepository := repository.NewCachedInteractiveRepository(interactiveDao, interactiveCache, loggerV1)
	interactiveService := service.NewInteractiveService(interactiveRepository)
	interactiveServiceClient := ioc.InitIntrGRPCClient(interactiveService)
	articleHandler := handler.NewArticleHandler(articleServiceClient, loggerV1, interactiveServiceClient)
	engine := ioc.InitGin(v, userHandler, oAuth2WechatHandler, articleHandler)
	client := ioc.InitKafka()
	interactiveReadBatchConsumer := events.NewInteractiveReadBatchConsumer(client, loggerV1, interactiveRepository)
	v2 := ioc.NewConsumer(interactiveReadBatchConsumer)
	articleDao := dao2.NewGormArticleDao(db)
	articleCache := cache2.NewRedisArticleCache(cmdable)
	articleRepository := repository2.NewArticleRepository(articleDao, articleCache, loggerV1)
	syncProducer := ioc.NewSyncProducer(client)
	producer := events2.NewKafkaProducer(syncProducer)
	articleService := service2.NewArticleService(articleRepository, loggerV1, producer)
	rankingRedisCache := cache4.NewRankingRedisCache(cmdable)
	rankingLocalCache := cache4.NewRankingLocalCache()
	rankingRepository := repository3.NewCachedRankingRepository(rankingRedisCache, rankingLocalCache)
	rankingService := service3.NewBatchRankingService(articleService, interactiveServiceClient, rankingRepository)
	rlockClient := ioc.InitRLockClient(cmdable)
	rankingJob := ioc.InitRankingJob(rankingService, rlockClient, loggerV1)
	cron := ioc.InitJob(loggerV1, rankingJob)
	app := &App{
		Server:    engine,
		Consumers: v2,
		cron:      cron,
	}
	return app
}

// wire.go:

// User 相关依赖
var UserSet = wire.NewSet(handler.NewUserHandler)

// Gorm 文章相关依赖
var GormArticleSet = wire.NewSet(handler.NewArticleHandler, service2.NewArticleService, repository2.NewArticleRepository, dao2.NewGormArticleDao, dao2.InitCollections, cache2.NewRedisArticleCache)

var ThirdPartySet = wire.NewSet(ioc.InitRedis, ioc.InitDB, ioc.InitLogger, jwt.NewRedisJWTHandler)

var InteractiveSet = wire.NewSet(service.NewInteractiveService, repository.NewCachedInteractiveRepository, dao.NewGORMInteractiveDao, cache.NewRedisInteractiveCache, events.NewInteractiveReadBatchConsumer)

var OAuth2Set = wire.NewSet(handler.NewOAuth2WechatHandler, ioc.InitOAuth2WechatService)

var KafkaSet = wire.NewSet(ioc.InitKafka, ioc.NewConsumer, ioc.NewSyncProducer, events2.NewKafkaProducer)

var rankingServiceSet = wire.NewSet(service3.NewBatchRankingService, repository3.NewCachedRankingRepository, cache4.NewRankingRedisCache, cache4.NewRankingLocalCache)

var grpcClientSet = wire.NewSet(ioc.InitIntrGRPCClient, ioc.InitUserGRPCClient, ioc.InitArticleGRPCClient, ioc.InitSMSGRPCClient, ioc.InitCodeGRPCClient)
