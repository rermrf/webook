// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package startup

import (
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
	repository3 "webook/interactive/repository"
	cache3 "webook/interactive/repository/cache"
	dao2 "webook/interactive/repository/dao"
	service3 "webook/interactive/service"
	article3 "webook/internal/events/article"
	"webook/internal/handler"
	"webook/internal/handler/jwt"
	"webook/internal/ioc"
	repository2 "webook/internal/repository"
	article2 "webook/internal/repository/article"
	cache2 "webook/internal/repository/cache"
	"webook/internal/repository/dao/article"
	service2 "webook/internal/service"
	"webook/user/repository"
	"webook/user/repository/cache"
	"webook/user/repository/dao"
	"webook/user/service"
)

// Injectors from wire.go:

func InitWebServer() *gin.Engine {
	cmdable := InitRedis()
	jwtHandler := jwt.NewRedisJWTHandler(cmdable)
	loggerV1 := InitLog()
	v := ioc.InitMiddlewares(cmdable, jwtHandler, loggerV1)
	db := InitDB()
	userDao := dao.NewUserDao(db)
	userCache := cache.NewUserCache(cmdable)
	userRepository := repository.NewCachedUserRepository(userDao, userCache)
	userService := service.NewUserService(userRepository, loggerV1)
	codeCache := cache2.NewCodeCache(cmdable)
	codeRepository := repository2.NewCodeRepository(codeCache)
	smsService := ioc.InitSMSService()
	codeService := service2.NewCodeService(codeRepository, smsService)
	userHandler := handler.NewUserHandler(userService, codeService, cmdable, jwtHandler, loggerV1)
	wechatService := InitWechatService(loggerV1)
	oAuth2WechatHandler := handler.NewOAuth2WechatHandler(wechatService, userService, jwtHandler)
	articleDao := article.NewGormArticleDao(db)
	articleCache := cache2.NewRedisArticleCache(cmdable)
	articleRepository := article2.NewArticleRepository(articleDao, articleCache, loggerV1, userRepository)
	client := InitKafka()
	syncProducer := NewSyncProducer(client)
	producer := article3.NewKafkaProducer(syncProducer)
	articleService := service2.NewArticleService(articleRepository, loggerV1, producer)
	interactiveDao := dao2.NewGORMInteractiveDao(db)
	interactiveCache := cache3.NewRedisInteractiveCache(cmdable)
	interactiveRepository := repository3.NewCachedInteractiveRepository(interactiveDao, interactiveCache, loggerV1)
	interactiveService := service3.NewInteractiveService(interactiveRepository)
	interactiveServiceClient := InitIntrGRPCClient(interactiveService)
	articleHandler := handler.NewArticleHandler(articleService, loggerV1, interactiveServiceClient)
	engine := ioc.InitGin(v, userHandler, oAuth2WechatHandler, articleHandler)
	return engine
}

func InitArticleHandler(d article.ArticleDao) *handler.ArticleHandler {
	cmdable := InitRedis()
	articleCache := cache2.NewRedisArticleCache(cmdable)
	loggerV1 := InitLog()
	db := InitDB()
	userDao := dao.NewUserDao(db)
	userCache := cache.NewUserCache(cmdable)
	userRepository := repository.NewCachedUserRepository(userDao, userCache)
	articleRepository := article2.NewArticleRepository(d, articleCache, loggerV1, userRepository)
	client := InitKafka()
	syncProducer := NewSyncProducer(client)
	producer := article3.NewKafkaProducer(syncProducer)
	articleService := service2.NewArticleService(articleRepository, loggerV1, producer)
	interactiveDao := dao2.NewGORMInteractiveDao(db)
	interactiveCache := cache3.NewRedisInteractiveCache(cmdable)
	interactiveRepository := repository3.NewCachedInteractiveRepository(interactiveDao, interactiveCache, loggerV1)
	interactiveService := service3.NewInteractiveService(interactiveRepository)
	interactiveServiceClient := InitIntrGRPCClient(interactiveService)
	articleHandler := handler.NewArticleHandler(articleService, loggerV1, interactiveServiceClient)
	return articleHandler
}

// wire.go:

var thirdPartySet = wire.NewSet(
	NewSyncProducer,
	InitKafka,
	InitDB,
	InitRedis,
	InitLog,
)

var userSvcProvider = wire.NewSet(dao.NewUserDao, cache.NewUserCache, repository.NewCachedUserRepository, service.NewUserService, handler.NewUserHandler)

var articleSet = wire.NewSet(handler.NewArticleHandler, service2.NewArticleService, article2.NewArticleRepository, article.NewGormArticleDao, cache2.NewRedisArticleCache, article3.NewKafkaProducer)

var interactiveSet = wire.NewSet(service3.NewInteractiveService, repository3.NewCachedInteractiveRepository, dao2.NewGORMInteractiveDao, cache3.NewRedisInteractiveCache)
