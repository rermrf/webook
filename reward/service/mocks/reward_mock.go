// Code generated by MockGen. DO NOT EDIT.
// Source: ./validator.go
//
// Generated by this command:
//
//	mockgen -source=./validator.go -destination=mocks/reward_mock.go -package=svcmocks RewardService
//

// Package svcmocks is a generated GoMock package.
package svcmocks

import (
	context "context"
	reflect "reflect"
	domain "webook/reward/domain"

	gomock "go.uber.org/mock/gomock"
)

// MockRewardService is a mock of RewardService interface.
type MockRewardService struct {
	ctrl     *gomock.Controller
	recorder *MockRewardServiceMockRecorder
}

// MockRewardServiceMockRecorder is the mock recorder for MockRewardService.
type MockRewardServiceMockRecorder struct {
	mock *MockRewardService
}

// NewMockRewardService creates a new mock instance.
func NewMockRewardService(ctrl *gomock.Controller) *MockRewardService {
	mock := &MockRewardService{ctrl: ctrl}
	mock.recorder = &MockRewardServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRewardService) EXPECT() *MockRewardServiceMockRecorder {
	return m.recorder
}

// GetReward mocks base method.
func (m *MockRewardService) GetReward(ctx context.Context, rid, uid int64) (domain.Reward, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReward", ctx, rid, uid)
	ret0, _ := ret[0].(domain.Reward)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReward indicates an expected call of GetReward.
func (mr *MockRewardServiceMockRecorder) GetReward(ctx, rid, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReward", reflect.TypeOf((*MockRewardService)(nil).GetReward), ctx, rid, uid)
}

// PreReward mocks base method.
func (m *MockRewardService) PreReward(ctx context.Context, r domain.Reward) (domain.CodeURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreReward", ctx, r)
	ret0, _ := ret[0].(domain.CodeURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PreReward indicates an expected call of PreReward.
func (mr *MockRewardServiceMockRecorder) PreReward(ctx, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreReward", reflect.TypeOf((*MockRewardService)(nil).PreReward), ctx, r)
}

// UpdateReward mocks base method.
func (m *MockRewardService) UpdateReward(ctx context.Context, bizTradeNO string, status domain.RewardStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReward", ctx, bizTradeNO, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReward indicates an expected call of UpdateReward.
func (mr *MockRewardServiceMockRecorder) UpdateReward(ctx, bizTradeNO, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReward", reflect.TypeOf((*MockRewardService)(nil).UpdateReward), ctx, bizTradeNO, status)
}
