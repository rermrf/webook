// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"webook/feed/events"
	"webook/feed/grpc"
	"webook/feed/ioc"
	"webook/feed/repository"
	"webook/feed/repository/cache"
	"webook/feed/repository/dao"
	"webook/feed/service"
	"webook/pkg/app"
)

// Injectors from wire.go:

func Init() *app.App {
	loggerV1 := ioc.InitLogger()
	db := ioc.InitDB(loggerV1)
	feedPullEventDao := dao.NewFeedPullEventDao(db)
	feedPushEventDao := dao.NewFeedPushEventDao(db)
	cmdable := ioc.InitRedis()
	feedEventCache := cache.NewFeedEventCache(cmdable)
	feedEventRepository := repository.NewFeedEventRepository(feedPullEventDao, feedPushEventDao, feedEventCache)
	client := ioc.InitEtcd()
	followServiceClient := ioc.InitFollowClient(client)
	v := ioc.RegisterHandler(feedEventRepository, followServiceClient)
	feedService := service.NewFeedService(feedEventRepository, v)
	feedEventGrpcServer := grpc.NewFeedEventGrpcServer(feedService)
	server := ioc.InitGRPCServer(feedEventGrpcServer, loggerV1)
	saramaClient := ioc.InitKafka()
	articleEventConsumer := events.NewArticleEventConsumer(saramaClient, loggerV1, feedService)
	feedEventConsumer := events.NewFeedEventConsumer(saramaClient, loggerV1, feedService)
	v2 := ioc.NewConsumers(articleEventConsumer, feedEventConsumer)
	appApp := &app.App{
		Server:    server,
		Consumers: v2,
	}
	return appApp
}

// wire.go:

var thirdPartyWireSet = wire.NewSet(ioc.InitEtcd, ioc.InitRedis, ioc.InitDB, ioc.InitLogger, ioc.InitFollowClient, ioc.InitKafka)

var serviceSet = wire.NewSet(dao.NewFeedPullEventDao, dao.NewFeedPushEventDao, cache.NewFeedEventCache, repository.NewFeedEventRepository)
