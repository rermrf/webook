// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"webook/search/events"
	"webook/search/grpc"
	"webook/search/ioc"
	"webook/search/repository"
	"webook/search/repository/dao"
	"webook/search/service"
)

// Injectors from wire.go:

func InitApp() *App {
	client := ioc.InitESClient()
	userDao := dao.NewUserESDao(client)
	userRepository := repository.NewUserRepository(userDao)
	articleDao := dao.NewArticleESDao(client)
	tagDao := dao.NewTagESDao(client)
	articleRepository := repository.NewArticleRepository(articleDao, tagDao)
	anyDao := dao.NewAnyESDao(client)
	anyRepository := repository.NewAnyRepository(anyDao)
	syncService := service.NewSyncService(userRepository, articleRepository, anyRepository)
	syncServiceServer := grpc.NewSyncServiceServer(syncService)
	searchService := service.NewSearchService(userRepository, articleRepository)
	searchServiceServer := grpc.NewSearchServiceServer(searchService)
	loggerV1 := ioc.InitLogger()
	server := ioc.InitGRPCServer(syncServiceServer, searchServiceServer, loggerV1)
	saramaClient := ioc.InitKafka()
	articleConsumer := events.NewArticleConsumer(syncService, saramaClient, loggerV1)
	userConsumer := events.NewUserConsumer(saramaClient, loggerV1, syncService)
	v := ioc.NewConsumers(articleConsumer, userConsumer)
	app := &App{
		server:    server,
		comsumers: v,
	}
	return app
}

// wire.go:

var thirdPartySet = wire.NewSet(ioc.InitLogger, ioc.InitESClient, ioc.InitEtcd, ioc.InitKafka)
