syntax="proto3";
package tag.v1;
option go_package="tag/v1;tagV1";

service TagService {
  rpc CreateTag(CreateTagRequest) returns (CreateTagResponse);
  // 覆盖式的 API
  // 也就是直接用新的 tag 全部覆盖掉已有的 tag
  rpc AttachTags(AttachTagsRequest) returns (AttachTagsResponse);
  // 我们可以预期，一个用户的标签不会有很多，所以没有特别大的必要做成分页
  rpc GetTags(GetTagsRequest) returns (GetTagsResponse);
  rpc GetBizTags(GetBizTagsRequest) returns (GetBizTagsResponse);
}

message CreateTagRequest {
  int64 uid = 1;
  string name = 2;
}

message CreateTagResponse {
  Tag tag = 1;
}

message AttachTagsRequest {
  repeated int64 tids = 1;
  int64 uid = 2;
  string biz = 3;
  int64 biz_id = 4;
}

message AttachTagsResponse {

}

message GetTagsRequest {
  // 按照用户的 Id 来查
  int64 uid = 1;
}

message GetTagsResponse {
  repeated Tag tag = 1;
}

message GetBizTagsRequest {
  string biz = 1;
  int64 biz_id = 2;
  int64 uid = 3;
}

message GetBizTagsResponse {
    repeated Tag tags = 1;
}

message Tag {
  int64 id = 1;
  string name = 2;
  // 谁的标签，如果是全局标签（或者系统标签），这个字段是没有的
  // 层级标签，你可能需要一个 oid 的东西，比如说 oid = 1 代表 IT 技术部门
  int64 uid = 3;
}