syntax = "proto3";

package follow.v1;
option go_package="follow/v1;followV1";

service FollowService {
  // 关注
  rpc Follow (FollowRequest) returns (FollowResponse);
  // 取消关注
  rpc CancelFollow(cancelFollowRequest) returns (CancelFollowResponse);
  // 获得某个人的关注列表
  rpc GetFollowee (GetFolloweeRequest) returns (GetFolloweeResponse);
  // 获得某个人关注另外一个人的详细信息
  rpc FollowInfo (FollowInfoRequest) returns (FollowInfoResponse);
  // 获取某人的粉丝列表
  rpc GetFollower (GetFollowerRequest) returns (GetFollowerResponse);
  // 获取默认的关注人数
  rpc GetFollowStatic (GetFollowStaticRequest) returns(GetFollowStaticResponse);
}

message FollowRequest {
  // 被关注者
  int64 followee = 1;
  // 关注者
  int64 follower = 2;
  // 如果说你有额外的功能
  // 分组功能
  //  int64 gid = 3;
  // 标签功能
  // repeated int64 label_id = 4;
  // 比如说是否主动提醒 follower，followee 有了新动态
  //  bool notification = 5;
}

message FollowResponse {

}

message cancelFollowRequest {
  // 被关注者
  int64 followee = 1;
  // 关注者
  int64 follower = 2;
}

message CancelFollowResponse {

}

message GetFolloweeRequest {
  // 关注者，也就是某人查看自己的关注列表
  int64 follower = 1;
  // 最为普通的分页接口设计
  int64 offset = 2;
  int64 limit =3;
}

message GetFolloweeResponse {
  repeated FollowRelation follow_relations = 1;
}

message FollowInfoRequest {
  // 关注者
  int64 follower = 1;
  // 被关注者
  int64 followee = 2;
}

message FollowInfoResponse {
  FollowRelation follow_relation = 1;
}

message GetFollowerRequest {
  int64 followee = 1;
}

message GetFollowerResponse {
  repeated FollowRelation follow_relations = 1;
}

message GetFollowStaticRequest {
  int64 followee = 1;
}

message GetFollowStaticResponse {
  FollowStatic followStatic = 1;
}

message FollowRelation {
  int64 id = 1;
  int64 follower = 2;
  int64 followee = 3;
}

message FollowStatic {
  int64 followers = 1;
  int64 followees = 2;
}