// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/proto/gen/follow/v1/follow_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=./api/proto/gen/follow/v1/follow_grpc.pb.go -package=followMocks -destination=./api/proto/gen/follow/v1/mocks/follow_grpc.mock.go
//

// Package followMocks is a generated GoMock package.
package followMocks

import (
	context "context"
	reflect "reflect"
	followv1 "webook/api/proto/gen/follow/v1"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockFollowServiceClient is a mock of FollowServiceClient interface.
type MockFollowServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockFollowServiceClientMockRecorder
	isgomock struct{}
}

// MockFollowServiceClientMockRecorder is the mock recorder for MockFollowServiceClient.
type MockFollowServiceClientMockRecorder struct {
	mock *MockFollowServiceClient
}

// NewMockFollowServiceClient creates a new mock instance.
func NewMockFollowServiceClient(ctrl *gomock.Controller) *MockFollowServiceClient {
	mock := &MockFollowServiceClient{ctrl: ctrl}
	mock.recorder = &MockFollowServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFollowServiceClient) EXPECT() *MockFollowServiceClientMockRecorder {
	return m.recorder
}

// CancelFollow mocks base method.
func (m *MockFollowServiceClient) CancelFollow(ctx context.Context, in *followv1.CancelFollowRequest, opts ...grpc.CallOption) (*followv1.CancelFollowResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelFollow", varargs...)
	ret0, _ := ret[0].(*followv1.CancelFollowResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelFollow indicates an expected call of CancelFollow.
func (mr *MockFollowServiceClientMockRecorder) CancelFollow(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelFollow", reflect.TypeOf((*MockFollowServiceClient)(nil).CancelFollow), varargs...)
}

// Follow mocks base method.
func (m *MockFollowServiceClient) Follow(ctx context.Context, in *followv1.FollowRequest, opts ...grpc.CallOption) (*followv1.FollowResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Follow", varargs...)
	ret0, _ := ret[0].(*followv1.FollowResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Follow indicates an expected call of Follow.
func (mr *MockFollowServiceClientMockRecorder) Follow(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Follow", reflect.TypeOf((*MockFollowServiceClient)(nil).Follow), varargs...)
}

// FollowInfo mocks base method.
func (m *MockFollowServiceClient) FollowInfo(ctx context.Context, in *followv1.FollowInfoRequest, opts ...grpc.CallOption) (*followv1.FollowInfoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FollowInfo", varargs...)
	ret0, _ := ret[0].(*followv1.FollowInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FollowInfo indicates an expected call of FollowInfo.
func (mr *MockFollowServiceClientMockRecorder) FollowInfo(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FollowInfo", reflect.TypeOf((*MockFollowServiceClient)(nil).FollowInfo), varargs...)
}

// GetFollowStatic mocks base method.
func (m *MockFollowServiceClient) GetFollowStatic(ctx context.Context, in *followv1.GetFollowStaticRequest, opts ...grpc.CallOption) (*followv1.GetFollowStaticResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFollowStatic", varargs...)
	ret0, _ := ret[0].(*followv1.GetFollowStaticResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFollowStatic indicates an expected call of GetFollowStatic.
func (mr *MockFollowServiceClientMockRecorder) GetFollowStatic(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFollowStatic", reflect.TypeOf((*MockFollowServiceClient)(nil).GetFollowStatic), varargs...)
}

// GetFollowee mocks base method.
func (m *MockFollowServiceClient) GetFollowee(ctx context.Context, in *followv1.GetFolloweeRequest, opts ...grpc.CallOption) (*followv1.GetFolloweeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFollowee", varargs...)
	ret0, _ := ret[0].(*followv1.GetFolloweeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFollowee indicates an expected call of GetFollowee.
func (mr *MockFollowServiceClientMockRecorder) GetFollowee(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFollowee", reflect.TypeOf((*MockFollowServiceClient)(nil).GetFollowee), varargs...)
}

// GetFollower mocks base method.
func (m *MockFollowServiceClient) GetFollower(ctx context.Context, in *followv1.GetFollowerRequest, opts ...grpc.CallOption) (*followv1.GetFollowerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFollower", varargs...)
	ret0, _ := ret[0].(*followv1.GetFollowerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFollower indicates an expected call of GetFollower.
func (mr *MockFollowServiceClientMockRecorder) GetFollower(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFollower", reflect.TypeOf((*MockFollowServiceClient)(nil).GetFollower), varargs...)
}

// MockFollowServiceServer is a mock of FollowServiceServer interface.
type MockFollowServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockFollowServiceServerMockRecorder
	isgomock struct{}
}

// MockFollowServiceServerMockRecorder is the mock recorder for MockFollowServiceServer.
type MockFollowServiceServerMockRecorder struct {
	mock *MockFollowServiceServer
}

// NewMockFollowServiceServer creates a new mock instance.
func NewMockFollowServiceServer(ctrl *gomock.Controller) *MockFollowServiceServer {
	mock := &MockFollowServiceServer{ctrl: ctrl}
	mock.recorder = &MockFollowServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFollowServiceServer) EXPECT() *MockFollowServiceServerMockRecorder {
	return m.recorder
}

// CancelFollow mocks base method.
func (m *MockFollowServiceServer) CancelFollow(arg0 context.Context, arg1 *followv1.CancelFollowRequest) (*followv1.CancelFollowResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelFollow", arg0, arg1)
	ret0, _ := ret[0].(*followv1.CancelFollowResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelFollow indicates an expected call of CancelFollow.
func (mr *MockFollowServiceServerMockRecorder) CancelFollow(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelFollow", reflect.TypeOf((*MockFollowServiceServer)(nil).CancelFollow), arg0, arg1)
}

// Follow mocks base method.
func (m *MockFollowServiceServer) Follow(arg0 context.Context, arg1 *followv1.FollowRequest) (*followv1.FollowResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Follow", arg0, arg1)
	ret0, _ := ret[0].(*followv1.FollowResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Follow indicates an expected call of Follow.
func (mr *MockFollowServiceServerMockRecorder) Follow(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Follow", reflect.TypeOf((*MockFollowServiceServer)(nil).Follow), arg0, arg1)
}

// FollowInfo mocks base method.
func (m *MockFollowServiceServer) FollowInfo(arg0 context.Context, arg1 *followv1.FollowInfoRequest) (*followv1.FollowInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FollowInfo", arg0, arg1)
	ret0, _ := ret[0].(*followv1.FollowInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FollowInfo indicates an expected call of FollowInfo.
func (mr *MockFollowServiceServerMockRecorder) FollowInfo(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FollowInfo", reflect.TypeOf((*MockFollowServiceServer)(nil).FollowInfo), arg0, arg1)
}

// GetFollowStatic mocks base method.
func (m *MockFollowServiceServer) GetFollowStatic(arg0 context.Context, arg1 *followv1.GetFollowStaticRequest) (*followv1.GetFollowStaticResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFollowStatic", arg0, arg1)
	ret0, _ := ret[0].(*followv1.GetFollowStaticResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFollowStatic indicates an expected call of GetFollowStatic.
func (mr *MockFollowServiceServerMockRecorder) GetFollowStatic(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFollowStatic", reflect.TypeOf((*MockFollowServiceServer)(nil).GetFollowStatic), arg0, arg1)
}

// GetFollowee mocks base method.
func (m *MockFollowServiceServer) GetFollowee(arg0 context.Context, arg1 *followv1.GetFolloweeRequest) (*followv1.GetFolloweeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFollowee", arg0, arg1)
	ret0, _ := ret[0].(*followv1.GetFolloweeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFollowee indicates an expected call of GetFollowee.
func (mr *MockFollowServiceServerMockRecorder) GetFollowee(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFollowee", reflect.TypeOf((*MockFollowServiceServer)(nil).GetFollowee), arg0, arg1)
}

// GetFollower mocks base method.
func (m *MockFollowServiceServer) GetFollower(arg0 context.Context, arg1 *followv1.GetFollowerRequest) (*followv1.GetFollowerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFollower", arg0, arg1)
	ret0, _ := ret[0].(*followv1.GetFollowerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFollower indicates an expected call of GetFollower.
func (mr *MockFollowServiceServerMockRecorder) GetFollower(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFollower", reflect.TypeOf((*MockFollowServiceServer)(nil).GetFollower), arg0, arg1)
}

// mustEmbedUnimplementedFollowServiceServer mocks base method.
func (m *MockFollowServiceServer) mustEmbedUnimplementedFollowServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedFollowServiceServer")
}

// mustEmbedUnimplementedFollowServiceServer indicates an expected call of mustEmbedUnimplementedFollowServiceServer.
func (mr *MockFollowServiceServerMockRecorder) mustEmbedUnimplementedFollowServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedFollowServiceServer", reflect.TypeOf((*MockFollowServiceServer)(nil).mustEmbedUnimplementedFollowServiceServer))
}

// MockUnsafeFollowServiceServer is a mock of UnsafeFollowServiceServer interface.
type MockUnsafeFollowServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeFollowServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeFollowServiceServerMockRecorder is the mock recorder for MockUnsafeFollowServiceServer.
type MockUnsafeFollowServiceServerMockRecorder struct {
	mock *MockUnsafeFollowServiceServer
}

// NewMockUnsafeFollowServiceServer creates a new mock instance.
func NewMockUnsafeFollowServiceServer(ctrl *gomock.Controller) *MockUnsafeFollowServiceServer {
	mock := &MockUnsafeFollowServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeFollowServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeFollowServiceServer) EXPECT() *MockUnsafeFollowServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedFollowServiceServer mocks base method.
func (m *MockUnsafeFollowServiceServer) mustEmbedUnimplementedFollowServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedFollowServiceServer")
}

// mustEmbedUnimplementedFollowServiceServer indicates an expected call of mustEmbedUnimplementedFollowServiceServer.
func (mr *MockUnsafeFollowServiceServerMockRecorder) mustEmbedUnimplementedFollowServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedFollowServiceServer", reflect.TypeOf((*MockUnsafeFollowServiceServer)(nil).mustEmbedUnimplementedFollowServiceServer))
}
