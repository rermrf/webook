// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: cronjob/v1/cronjob.proto

package cronjobv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CronJob struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Cron          string                 `protobuf:"bytes,3,opt,name=cron,proto3" json:"cron,omitempty"`
	Executor      string                 `protobuf:"bytes,4,opt,name=executor,proto3" json:"executor,omitempty"`
	Cfg           string                 `protobuf:"bytes,5,opt,name=cfg,proto3" json:"cfg,omitempty"`
	NextTime      *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=next_time,json=nextTime,proto3" json:"next_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CronJob) Reset() {
	*x = CronJob{}
	mi := &file_cronjob_v1_cronjob_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CronJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronJob) ProtoMessage() {}

func (x *CronJob) ProtoReflect() protoreflect.Message {
	mi := &file_cronjob_v1_cronjob_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronJob.ProtoReflect.Descriptor instead.
func (*CronJob) Descriptor() ([]byte, []int) {
	return file_cronjob_v1_cronjob_proto_rawDescGZIP(), []int{0}
}

func (x *CronJob) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CronJob) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CronJob) GetCron() string {
	if x != nil {
		return x.Cron
	}
	return ""
}

func (x *CronJob) GetExecutor() string {
	if x != nil {
		return x.Executor
	}
	return ""
}

func (x *CronJob) GetCfg() string {
	if x != nil {
		return x.Cfg
	}
	return ""
}

func (x *CronJob) GetNextTime() *timestamppb.Timestamp {
	if x != nil {
		return x.NextTime
	}
	return nil
}

type PreemptRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PreemptRequest) Reset() {
	*x = PreemptRequest{}
	mi := &file_cronjob_v1_cronjob_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PreemptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreemptRequest) ProtoMessage() {}

func (x *PreemptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cronjob_v1_cronjob_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreemptRequest.ProtoReflect.Descriptor instead.
func (*PreemptRequest) Descriptor() ([]byte, []int) {
	return file_cronjob_v1_cronjob_proto_rawDescGZIP(), []int{1}
}

type PreemptResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Job           *CronJob               `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PreemptResponse) Reset() {
	*x = PreemptResponse{}
	mi := &file_cronjob_v1_cronjob_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PreemptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreemptResponse) ProtoMessage() {}

func (x *PreemptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cronjob_v1_cronjob_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreemptResponse.ProtoReflect.Descriptor instead.
func (*PreemptResponse) Descriptor() ([]byte, []int) {
	return file_cronjob_v1_cronjob_proto_rawDescGZIP(), []int{2}
}

func (x *PreemptResponse) GetJob() *CronJob {
	if x != nil {
		return x.Job
	}
	return nil
}

type ResetNextTimeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Job           *CronJob               `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResetNextTimeRequest) Reset() {
	*x = ResetNextTimeRequest{}
	mi := &file_cronjob_v1_cronjob_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResetNextTimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetNextTimeRequest) ProtoMessage() {}

func (x *ResetNextTimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cronjob_v1_cronjob_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetNextTimeRequest.ProtoReflect.Descriptor instead.
func (*ResetNextTimeRequest) Descriptor() ([]byte, []int) {
	return file_cronjob_v1_cronjob_proto_rawDescGZIP(), []int{3}
}

func (x *ResetNextTimeRequest) GetJob() *CronJob {
	if x != nil {
		return x.Job
	}
	return nil
}

type ResetNextTimeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResetNextTimeResponse) Reset() {
	*x = ResetNextTimeResponse{}
	mi := &file_cronjob_v1_cronjob_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResetNextTimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetNextTimeResponse) ProtoMessage() {}

func (x *ResetNextTimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cronjob_v1_cronjob_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetNextTimeResponse.ProtoReflect.Descriptor instead.
func (*ResetNextTimeResponse) Descriptor() ([]byte, []int) {
	return file_cronjob_v1_cronjob_proto_rawDescGZIP(), []int{4}
}

type AddJobRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Job           *CronJob               `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddJobRequest) Reset() {
	*x = AddJobRequest{}
	mi := &file_cronjob_v1_cronjob_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddJobRequest) ProtoMessage() {}

func (x *AddJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cronjob_v1_cronjob_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddJobRequest.ProtoReflect.Descriptor instead.
func (*AddJobRequest) Descriptor() ([]byte, []int) {
	return file_cronjob_v1_cronjob_proto_rawDescGZIP(), []int{5}
}

func (x *AddJobRequest) GetJob() *CronJob {
	if x != nil {
		return x.Job
	}
	return nil
}

type AddJobResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddJobResponse) Reset() {
	*x = AddJobResponse{}
	mi := &file_cronjob_v1_cronjob_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddJobResponse) ProtoMessage() {}

func (x *AddJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cronjob_v1_cronjob_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddJobResponse.ProtoReflect.Descriptor instead.
func (*AddJobResponse) Descriptor() ([]byte, []int) {
	return file_cronjob_v1_cronjob_proto_rawDescGZIP(), []int{6}
}

var File_cronjob_v1_cronjob_proto protoreflect.FileDescriptor

var file_cronjob_v1_cronjob_proto_rawDesc = string([]byte{
	0x0a, 0x18, 0x63, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x6f,
	0x6e, 0x6a, 0x6f, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x63, 0x72, 0x6f, 0x6e,
	0x6a, 0x6f, 0x62, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa8, 0x01, 0x0a, 0x07, 0x43, 0x72, 0x6f, 0x6e,
	0x4a, 0x6f, 0x62, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x72, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x72, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x66, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x66, 0x67, 0x12, 0x37, 0x0a, 0x09, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x10, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x38, 0x0a, 0x0f, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x22, 0x3d,
	0x0a, 0x14, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x22, 0x17, 0x0a,
	0x15, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x22, 0x10,
	0x0a, 0x0e, 0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0xeb, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x1a,
	0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x65,
	0x6d, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x72, 0x6f,
	0x6e, 0x6a, 0x6f, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x4e, 0x65, 0x78, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x6a,
	0x6f, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x72, 0x6f,
	0x6e, 0x6a, 0x6f, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x78,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a,
	0x06, 0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62, 0x12, 0x19, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x6a, 0x6f,
	0x62, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x92,
	0x01, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x2e, 0x76,
	0x31, 0x42, 0x0c, 0x43, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x29, 0x77, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x2f,
	0x76, 0x31, 0x3b, 0x63, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x43,
	0x58, 0x58, 0xaa, 0x02, 0x0a, 0x43, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x2e, 0x56, 0x31, 0xca,
	0x02, 0x0a, 0x43, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x16, 0x43,
	0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0b, 0x43, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x3a,
	0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_cronjob_v1_cronjob_proto_rawDescOnce sync.Once
	file_cronjob_v1_cronjob_proto_rawDescData []byte
)

func file_cronjob_v1_cronjob_proto_rawDescGZIP() []byte {
	file_cronjob_v1_cronjob_proto_rawDescOnce.Do(func() {
		file_cronjob_v1_cronjob_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_cronjob_v1_cronjob_proto_rawDesc), len(file_cronjob_v1_cronjob_proto_rawDesc)))
	})
	return file_cronjob_v1_cronjob_proto_rawDescData
}

var file_cronjob_v1_cronjob_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_cronjob_v1_cronjob_proto_goTypes = []any{
	(*CronJob)(nil),               // 0: cronjob.v1.CronJob
	(*PreemptRequest)(nil),        // 1: cronjob.v1.PreemptRequest
	(*PreemptResponse)(nil),       // 2: cronjob.v1.PreemptResponse
	(*ResetNextTimeRequest)(nil),  // 3: cronjob.v1.ResetNextTimeRequest
	(*ResetNextTimeResponse)(nil), // 4: cronjob.v1.ResetNextTimeResponse
	(*AddJobRequest)(nil),         // 5: cronjob.v1.AddJobRequest
	(*AddJobResponse)(nil),        // 6: cronjob.v1.AddJobResponse
	(*timestamppb.Timestamp)(nil), // 7: google.protobuf.Timestamp
}
var file_cronjob_v1_cronjob_proto_depIdxs = []int32{
	7, // 0: cronjob.v1.CronJob.next_time:type_name -> google.protobuf.Timestamp
	0, // 1: cronjob.v1.PreemptResponse.job:type_name -> cronjob.v1.CronJob
	0, // 2: cronjob.v1.ResetNextTimeRequest.job:type_name -> cronjob.v1.CronJob
	0, // 3: cronjob.v1.AddJobRequest.job:type_name -> cronjob.v1.CronJob
	1, // 4: cronjob.v1.CronJobService.Preempt:input_type -> cronjob.v1.PreemptRequest
	3, // 5: cronjob.v1.CronJobService.ResetNextTime:input_type -> cronjob.v1.ResetNextTimeRequest
	5, // 6: cronjob.v1.CronJobService.AddJob:input_type -> cronjob.v1.AddJobRequest
	2, // 7: cronjob.v1.CronJobService.Preempt:output_type -> cronjob.v1.PreemptResponse
	4, // 8: cronjob.v1.CronJobService.ResetNextTime:output_type -> cronjob.v1.ResetNextTimeResponse
	6, // 9: cronjob.v1.CronJobService.AddJob:output_type -> cronjob.v1.AddJobResponse
	7, // [7:10] is the sub-list for method output_type
	4, // [4:7] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_cronjob_v1_cronjob_proto_init() }
func file_cronjob_v1_cronjob_proto_init() {
	if File_cronjob_v1_cronjob_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_cronjob_v1_cronjob_proto_rawDesc), len(file_cronjob_v1_cronjob_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cronjob_v1_cronjob_proto_goTypes,
		DependencyIndexes: file_cronjob_v1_cronjob_proto_depIdxs,
		MessageInfos:      file_cronjob_v1_cronjob_proto_msgTypes,
	}.Build()
	File_cronjob_v1_cronjob_proto = out.File
	file_cronjob_v1_cronjob_proto_goTypes = nil
	file_cronjob_v1_cronjob_proto_depIdxs = nil
}
